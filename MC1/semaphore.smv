-- ### module of a process
MODULE user(semaphore, active)
VAR
  state : { idle, entering, critical, exiting }; -- ### possible states
ASSIGN
  init(state) := idle; -- ### initially state is idle
  -- ### transitions of states
  next(state) := case
    -- ### added active to each, only change state if this process is being run
    state = idle & active : { idle, entering };
    state = entering & !semaphore & active : critical;
    state = critical & active : { critical, exiting };
    state = exiting & active : idle;
    TRUE : state;
  esac;

-- ### module of the scheduler
MODULE main
VAR
  semaphore : boolean; -- ### the semaphore
  VAR running :  0..1; -- ### the id of the currently scheduled process
  proc1 : user(semaphore, next(running) = 0); -- ### the process with id 0
  proc2 : user(semaphore, next(running) = 1); -- ### the process with id 1
ASSIGN
  init(semaphore) := FALSE; -- ### initially semaphore is not taken

  -- ### schedule processes equally often (toggle between them)
  next(running) := case
    running = 0: 1;
    running = 1: 0;
  esac;

  next(semaphore) := case
    -- ### grab/release semaphore as proc1
    running = 1 & proc1.state = entering: TRUE;
    running = 1 & proc1.state = exiting: FALSE;

    -- ### grab/release semaphore as proc2
    running = 0 & proc2.state = entering: TRUE;
    running = 0 & proc2.state = exiting: FALSE;

    TRUE : semaphore;
  esac;

-- ### fairness, both states are critical equally often
FAIRNESS
    proc1.state = critical
FAIRNESS
    proc2.state = critical

-- ### properties to satisfy
SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety
SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness


/--
Trace Type: Counterexample 
  -> State: 1.1 <-
    semaphore = FALSE
    running = 0
    proc1.state = idle
    proc2.state = idle
  -> State: 1.2 <-
    running = 1
    proc2.state = entering
  -> State: 1.3 <-
    running = 0
    proc1.state = entering
  -- Loop starts here
  -> State: 1.4 <-
    semaphore = TRUE
    running = 1
    proc2.state = critical
  -> State: 1.5 <-
    running = 0
  -> State: 1.6 <-
    running = 1

### trace when fairness is not enabled
### what happens is that proc2 gets to the critical section and never leaves it
### this violates the liveness property
--/